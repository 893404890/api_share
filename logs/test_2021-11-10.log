[2021-11-10 09:51:58] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:51:58] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'USER_BUSINESS', 'msg': '用户名、密码错误或账号冻结', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:51:58] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree1'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:51:58] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'CAPTCHA_ERROR', 'msg': '验证码错误', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:51:58] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree1'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:51:58] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'CAPTCHA_ERROR', 'msg': '验证码错误', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:51:59] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree1'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:51:59] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'CAPTCHA_ERROR', 'msg': '验证码错误', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:51:59] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree1'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:51:59] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'CAPTCHA_ERROR', 'msg': '验证码错误', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:51:59] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree1'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:51:59] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'CAPTCHA_ERROR', 'msg': '验证码错误', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:54:40] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:54:40] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'USER_BUSINESS', 'msg': '用户名、密码错误或账号冻结', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:54:40] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:54:40] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'USER_BUSINESS', 'msg': '用户名、密码错误或账号冻结', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:54:40] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:54:40] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'USER_BUSINESS', 'msg': '用户名、密码错误或账号冻结', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:54:40] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:54:40] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'USER_BUSINESS', 'msg': '用户名、密码错误或账号冻结', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:54:40] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree1'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:54:40] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'CAPTCHA_ERROR', 'msg': '验证码错误', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:54:40] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree1'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:54:40] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'CAPTCHA_ERROR', 'msg': '验证码错误', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:54:40] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree1'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:54:40] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'CAPTCHA_ERROR', 'msg': '验证码错误', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:54:40] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree1'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:54:40] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'CAPTCHA_ERROR', 'msg': '验证码错误', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:54:40] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree1'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:54:41] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'CAPTCHA_ERROR', 'msg': '验证码错误', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:54:59] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:55:00] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'USER_BUSINESS', 'msg': '用户名、密码错误或账号冻结', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:55:00] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree1'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:55:00] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'CAPTCHA_ERROR', 'msg': '验证码错误', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:55:00] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree1'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:55:00] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'CAPTCHA_ERROR', 'msg': '验证码错误', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:55:30] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:55:30] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'USER_BUSINESS', 'msg': '用户名、密码错误或账号冻结', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:55:30] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree1'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:55:30] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'CAPTCHA_ERROR', 'msg': '验证码错误', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:55:30] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree1'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:55:31] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'CAPTCHA_ERROR', 'msg': '验证码错误', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:56:29] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:56:29] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'USER_BUSINESS', 'msg': '用户名、密码错误或账号冻结', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:56:29] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree1'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:56:29] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'CAPTCHA_ERROR', 'msg': '验证码错误', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:56:29] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree1'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:56:29] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'CAPTCHA_ERROR', 'msg': '验证码错误', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:56:29] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree1'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:56:29] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'CAPTCHA_ERROR', 'msg': '验证码错误', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:56:30] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree1'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:56:30] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'CAPTCHA_ERROR', 'msg': '验证码错误', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 09:56:30] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree1'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 09:56:30] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'CAPTCHA_ERROR', 'msg': '验证码错误', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 10:15:24] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 10:15:24] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'USER_BUSINESS', 'msg': '用户名、密码错误或账号冻结', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 10:15:24] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree1'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 10:15:24] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'CAPTCHA_ERROR', 'msg': '验证码错误', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 10:15:24] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree1'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 10:15:24] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'CAPTCHA_ERROR', 'msg': '验证码错误', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 10:15:24] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree1'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 10:15:24] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'CAPTCHA_ERROR', 'msg': '验证码错误', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 10:15:24] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree1'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 10:15:25] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'CAPTCHA_ERROR', 'msg': '验证码错误', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 10:15:25] [INFO] [baseapi.py]/[line: 16]/[request] ******************接口请求信息********************
请求方法:post
接口地址:/rest/login
入参信息:{'json': {'accountName': 'admin', 'password': 'bonree', 'captcha': 'bonree1'}, 'headers': {'Content-Type': 'application/json'}} 
[2021-11-10 10:15:25] [INFO] [baseapi.py]/[line: 18]/[request] ******************接口返回信息********************
{'id': 'CAPTCHA_ERROR', 'msg': '验证码错误', 'field': '', 'data': None, 'status': '200'} 
[2021-11-10 14:23:49] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 2, 'node_id': ['node_id1', 'node_id2'], 'remark': '备注2'} 
[2021-11-10 14:23:49] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 2, 'node_id': ['node_id1', 'node_id2'], 'remark': '备注2'} 
[2021-11-10 14:23:49] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 2, 'node_id': ['node_id1', 'node_id2'], 'remark': '备注2'} 
[2021-11-10 14:23:49] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 2, 'node_id': ['node_id1', 'node_id2'], 'remark': '备注2'} 
[2021-11-10 14:25:39] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 2, 'node_id': ['node_id1', 'node_id2'], 'remark': '备注2'} 
[2021-11-10 14:25:40] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 2, 'node_id': ['node_id1', 'node_id2'], 'remark': '备注2'} 
[2021-11-10 14:25:40] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 2, 'node_id': ['node_id1', 'node_id2'], 'remark': '备注2'} 
[2021-11-10 14:25:40] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 2, 'node_id': ['node_id1', 'node_id2'], 'remark': '备注2'} 
[2021-11-10 14:46:55] [INFO] [api.py]/[line: 90]/[delete] 接收到的参数id <==== 1 
[2021-11-10 14:46:56] [INFO] [api.py]/[line: 94]/[delete] None 
[2021-11-10 14:46:56] [INFO] [test_api.py]/[line: 45]/[test_delete] {'code': 40002, 'msg': 'Case is not exist'} 
[2021-11-10 14:47:06] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 2, 'node_id': ['node_id1', 'node_id2'], 'remark': '备注2'} 
[2021-11-10 14:47:06] [INFO] [api.py]/[line: 48]/[post] None 
[2021-11-10 14:47:07] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 2, 'node_id': ['node_id1', 'node_id2'], 'remark': '备注2'} 
[2021-11-10 14:47:07] [INFO] [api.py]/[line: 48]/[post] None 
[2021-11-10 14:47:29] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 2, 'node_id': 'node_id1', 'remark': '备注2'} 
[2021-11-10 14:47:30] [INFO] [api.py]/[line: 48]/[post] None 
[2021-11-10 14:47:30] [INFO] [api.py]/[line: 58]/[post] 将要返回的内容 ====> Case id 2 success add 
[2021-11-10 14:47:30] [INFO] [test_api.py]/[line: 33]/[test_add] {'code': 0, 'msg': 'Case id 2 success add'} 
[2021-11-10 14:48:24] [INFO] [api.py]/[line: 20]/[get] 接收到的参数id <==== None 
[2021-11-10 14:48:24] [INFO] [api.py]/[line: 33]/[get] 将要返回的内容 ====> [{'id': 2, 'node_id': 'node_id1', 'remark': '备注2'}] 
[2021-11-10 14:48:24] [INFO] [test_api.py]/[line: 57]/[test_select] {'code': 0, 'msg': {'data': [{'id': 2, 'node_id': 'node_id1', 'remark': '备注2'}]}} 
[2021-11-10 14:48:24] [INFO] [api.py]/[line: 20]/[get] 接收到的参数id <==== 1 
[2021-11-10 14:48:24] [INFO] [api.py]/[line: 33]/[get] 将要返回的内容 ====> [] 
[2021-11-10 14:48:24] [INFO] [test_api.py]/[line: 62]/[test_select] {'code': 0, 'msg': {'data': []}} 
[2021-11-10 14:50:01] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 2, 'node_id': 'node_id1', 'remark': '备注2'} 
[2021-11-10 14:50:01] [INFO] [api.py]/[line: 48]/[post] <TestCase 2> 
[2021-11-10 14:50:01] [INFO] [test_api.py]/[line: 33]/[test_add] {'code': 40001, 'msg': 'Case is exist'} 
[2021-11-10 14:50:01] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 2, 'node_id': 'node_id1', 'remark': '备注2'} 
[2021-11-10 14:50:01] [INFO] [api.py]/[line: 48]/[post] <TestCase 2> 
[2021-11-10 14:50:01] [INFO] [test_api.py]/[line: 33]/[test_add] {'code': 40001, 'msg': 'Case is exist'} 
[2021-11-10 14:50:01] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 2, 'node_id': 'node_id1', 'remark': '备注2'} 
[2021-11-10 14:50:01] [INFO] [api.py]/[line: 48]/[post] <TestCase 2> 
[2021-11-10 14:50:01] [INFO] [test_api.py]/[line: 33]/[test_add] {'code': 40001, 'msg': 'Case is exist'} 
[2021-11-10 14:50:01] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 2, 'node_id': 'node_id1', 'remark': '备注2'} 
[2021-11-10 14:50:01] [INFO] [api.py]/[line: 48]/[post] <TestCase 2> 
[2021-11-10 14:50:01] [INFO] [test_api.py]/[line: 33]/[test_add] {'code': 40001, 'msg': 'Case is exist'} 
[2021-11-10 14:50:24] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 2, 'node_id': 'node_id1', 'remark': '备注2'} 
[2021-11-10 14:50:24] [INFO] [api.py]/[line: 48]/[post] <TestCase 2> 
[2021-11-10 14:50:24] [INFO] [test_api.py]/[line: 33]/[test_add] {'code': 40001, 'msg': 'Case is exist'} 
[2021-11-10 14:50:24] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 2, 'node_id': 'node_id1', 'remark': '备注2'} 
[2021-11-10 14:50:24] [INFO] [api.py]/[line: 48]/[post] <TestCase 2> 
[2021-11-10 14:50:24] [INFO] [test_api.py]/[line: 33]/[test_add] {'code': 40001, 'msg': 'Case is exist'} 
[2021-11-10 14:50:24] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 2, 'node_id': 'node_id1', 'remark': '备注2'} 
[2021-11-10 14:50:24] [INFO] [api.py]/[line: 48]/[post] <TestCase 2> 
[2021-11-10 14:50:24] [INFO] [test_api.py]/[line: 33]/[test_add] {'code': 40001, 'msg': 'Case is exist'} 
[2021-11-10 14:50:24] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 2, 'node_id': 'node_id1', 'remark': '备注2'} 
[2021-11-10 14:50:24] [INFO] [api.py]/[line: 48]/[post] <TestCase 2> 
[2021-11-10 14:50:24] [INFO] [test_api.py]/[line: 33]/[test_add] {'code': 40001, 'msg': 'Case is exist'} 
[2021-11-10 14:50:40] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 2, 'node_id': 'node_id1', 'remark': '备注2'} 
[2021-11-10 14:50:40] [INFO] [api.py]/[line: 48]/[post] <TestCase 2> 
[2021-11-10 14:50:40] [INFO] [test_api.py]/[line: 33]/[test_add] {'code': 40001, 'msg': 'Case is exist'} 
[2021-11-10 14:50:40] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 2, 'node_id': 'node_id1', 'remark': '备注2'} 
[2021-11-10 14:50:40] [INFO] [api.py]/[line: 48]/[post] <TestCase 2> 
[2021-11-10 14:50:40] [INFO] [test_api.py]/[line: 33]/[test_add] {'code': 40001, 'msg': 'Case is exist'} 
[2021-11-10 14:50:40] [INFO] [api.py]/[line: 90]/[delete] 接收到的参数id <==== 2 
[2021-11-10 14:50:40] [INFO] [api.py]/[line: 94]/[delete] <TestCase 2> 
[2021-11-10 14:50:40] [INFO] [test_api.py]/[line: 46]/[test_delete] {'code': 0, 'msg': 'Case id 2 success delete'} 
[2021-11-10 15:02:36] [INFO] [api.py]/[line: 90]/[delete] 接收到的参数id <==== 2 
[2021-11-10 15:02:36] [INFO] [api.py]/[line: 94]/[delete] None 
[2021-11-10 15:02:37] [INFO] [test_api.py]/[line: 46]/[test_delete] {'code': 40002, 'msg': 'Case is not exist'} 
[2021-11-10 15:02:48] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 2, 'node_id': 'node_id1', 'remark': '备注2'} 
[2021-11-10 15:02:48] [INFO] [api.py]/[line: 48]/[post] None 
[2021-11-10 15:02:49] [INFO] [api.py]/[line: 58]/[post] 将要返回的内容 ====> Case id 2 success add 
[2021-11-10 15:02:49] [INFO] [test_api.py]/[line: 33]/[test_add] {'code': 0, 'msg': 'Case id 2 success add'} 
[2021-11-10 15:02:49] [INFO] [api.py]/[line: 90]/[delete] 接收到的参数id <==== 2 
[2021-11-10 15:02:49] [INFO] [api.py]/[line: 94]/[delete] <TestCase 2> 
[2021-11-10 15:02:49] [INFO] [test_api.py]/[line: 46]/[test_delete] {'code': 0, 'msg': 'Case id 2 success delete'} 
[2021-11-10 15:05:27] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 2, 'node_id': 'node_id1', 'remark': '备注2'} 
[2021-11-10 15:05:27] [INFO] [api.py]/[line: 48]/[post] None 
[2021-11-10 15:05:27] [INFO] [api.py]/[line: 58]/[post] 将要返回的内容 ====> Case id 2 success add 
[2021-11-10 15:05:27] [INFO] [test_api.py]/[line: 33]/[test_add] {'code': 0, 'msg': 'Case id 2 success add'} 
[2021-11-10 15:06:20] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 1, 'node_id': 'node_id1', 'remark': '备注1'} 
[2021-11-10 15:06:20] [INFO] [api.py]/[line: 48]/[post] None 
[2021-11-10 15:06:20] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 1, 'node_id': 'node_id1', 'remark': '备注1'} 
[2021-11-10 15:06:20] [INFO] [api.py]/[line: 48]/[post] None 
[2021-11-10 15:06:42] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 3, 'node_id': 'node_id1', 'remark': '备注1'} 
[2021-11-10 15:06:42] [INFO] [api.py]/[line: 48]/[post] None 
[2021-11-10 15:06:42] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 3, 'node_id': 'node_id1', 'remark': '备注1'} 
[2021-11-10 15:06:42] [INFO] [api.py]/[line: 48]/[post] None 
[2021-11-10 15:06:53] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 3, 'node_id': 'node_id2', 'remark': '备注1'} 
[2021-11-10 15:06:53] [INFO] [api.py]/[line: 48]/[post] None 
[2021-11-10 15:06:53] [INFO] [api.py]/[line: 58]/[post] 将要返回的内容 ====> Case id 3 success add 
[2021-11-10 15:06:53] [INFO] [test_api.py]/[line: 33]/[test_add] {'code': 0, 'msg': 'Case id 3 success add'} 
[2021-11-10 15:06:59] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 1, 'node_id': 'node_id3', 'remark': '备注1'} 
[2021-11-10 15:06:59] [INFO] [api.py]/[line: 48]/[post] None 
[2021-11-10 15:06:59] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 1, 'node_id': 'node_id3', 'remark': '备注1'} 
[2021-11-10 15:06:59] [INFO] [api.py]/[line: 48]/[post] None 
[2021-11-10 15:07:07] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 4, 'node_id': 'node_id3', 'remark': '备注1'} 
[2021-11-10 15:07:07] [INFO] [api.py]/[line: 48]/[post] None 
[2021-11-10 15:07:07] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 4, 'node_id': 'node_id3', 'remark': '备注1'} 
[2021-11-10 15:07:08] [INFO] [api.py]/[line: 48]/[post] None 
[2021-11-10 15:07:21] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'} 
[2021-11-10 15:07:21] [INFO] [api.py]/[line: 48]/[post] None 
[2021-11-10 15:07:21] [INFO] [api.py]/[line: 58]/[post] 将要返回的内容 ====> Case id 4 success add 
[2021-11-10 15:07:21] [INFO] [test_api.py]/[line: 33]/[test_add] {'code': 0, 'msg': 'Case id 4 success add'} 
[2021-11-10 15:09:31] [INFO] [api.py]/[line: 20]/[get] 接收到的参数id <==== None 
[2021-11-10 15:09:31] [INFO] [api.py]/[line: 33]/[get] 将要返回的内容 ====> [{'id': 2, 'node_id': 'node_id1', 'remark': '备注2'}, {'id': 3, 'node_id': 'node_id2', 'remark': '备注1'}, {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'}] 
[2021-11-10 15:09:38] [INFO] [api.py]/[line: 20]/[get] 接收到的参数id <==== None 
[2021-11-10 15:09:38] [INFO] [api.py]/[line: 33]/[get] 将要返回的内容 ====> [{'id': 2, 'node_id': 'node_id1', 'remark': '备注2'}, {'id': 3, 'node_id': 'node_id2', 'remark': '备注1'}, {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'}] 
[2021-11-10 15:09:43] [INFO] [api.py]/[line: 20]/[get] 接收到的参数id <==== None 
[2021-11-10 15:09:43] [INFO] [api.py]/[line: 33]/[get] 将要返回的内容 ====> [{'id': 2, 'node_id': 'node_id1', 'remark': '备注2'}, {'id': 3, 'node_id': 'node_id2', 'remark': '备注1'}, {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'}] 
[2021-11-10 15:11:49] [INFO] [api.py]/[line: 69]/[put] 接收到的参数 <==== {'id': 2, 'node_id': 'hogwarts', 'remark': '备注3'} 
[2021-11-10 15:11:49] [INFO] [api.py]/[line: 74]/[put] <TestCase 2> 
[2021-11-10 15:11:49] [INFO] [api.py]/[line: 69]/[put] 接收到的参数 <==== {'id': 2, 'node_id': 'hogwarts', 'remark': '备注3'} 
[2021-11-10 15:11:49] [INFO] [api.py]/[line: 74]/[put] <TestCase 2> 
[2021-11-10 15:12:22] [INFO] [api.py]/[line: 20]/[get] 接收到的参数id <==== None 
[2021-11-10 15:12:22] [INFO] [api.py]/[line: 33]/[get] 将要返回的内容 ====> [{'id': 2, 'node_id': 'node_id1', 'remark': '备注2'}, {'id': 3, 'node_id': 'node_id2', 'remark': '备注1'}, {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'}] 
[2021-11-10 15:12:22] [INFO] [test_api.py]/[line: 60]/[test_select] {'code': 0, 'msg': {'data': [{'id': 2, 'node_id': 'node_id1', 'remark': '备注2'}, {'id': 3, 'node_id': 'node_id2', 'remark': '备注1'}, {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'}]}} 
[2021-11-10 15:12:22] [INFO] [api.py]/[line: 20]/[get] 接收到的参数id <==== 1 
[2021-11-10 15:12:22] [INFO] [api.py]/[line: 33]/[get] 将要返回的内容 ====> [] 
[2021-11-10 15:12:22] [INFO] [test_api.py]/[line: 65]/[test_select] {'code': 0, 'msg': {'data': []}} 
[2021-11-10 15:13:35] [INFO] [api.py]/[line: 69]/[put] 接收到的参数 <==== {'id': 2, 'node_id': 'test', 'remark': '备注122'} 
[2021-11-10 15:13:35] [INFO] [api.py]/[line: 74]/[put] <TestCase 2> 
[2021-11-10 15:14:26] [INFO] [api.py]/[line: 69]/[put] 接收到的参数 <==== {'id': 2, 'node_id': 'test', 'remark': '备注122'} 
[2021-11-10 15:14:26] [INFO] [api.py]/[line: 74]/[put] <TestCase 2> 
[2021-11-10 15:18:16] [INFO] [api.py]/[line: 69]/[put] 接收到的参数 <==== {'id': 2, 'node_id': 'test', 'remark': '备注122'} 
[2021-11-10 15:18:16] [INFO] [api.py]/[line: 74]/[put] <TestCase 2> 
[2021-11-10 15:19:07] [INFO] [api.py]/[line: 69]/[put] 接收到的参数 <==== {'id': 2, 'node_id': 'test', 'remark': '备注122'} 
[2021-11-10 15:19:07] [INFO] [api.py]/[line: 74]/[put] <TestCase 2> 
[2021-11-10 15:22:37] [INFO] [api.py]/[line: 69]/[put] 接收到的参数 <==== {'id': 3, 'node_id': 'node_id2', 'remark': '备注122'} 
[2021-11-10 15:22:37] [INFO] [api.py]/[line: 74]/[put] <TestCase 3> 
[2021-11-10 15:22:37] [INFO] [api.py]/[line: 79]/[put] 将要返回的内容 ====> Case id 3 success change to {'id': 3, 'node_id': 'node_id2', 'remark': '备注122'} 
[2021-11-10 15:22:37] [INFO] [test_api.py]/[line: 81]/[test_update] {'code': 0, 'msg': "Case id 3 success change to {'id': 3, 'node_id': 'node_id2', 'remark': '备注122'}"} 
[2021-11-10 15:24:01] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'} 
[2021-11-10 15:24:01] [INFO] [api.py]/[line: 48]/[post] <TestCase 4> 
[2021-11-10 15:24:01] [INFO] [test_api.py]/[line: 31]/[test_add] {'code': 40001, 'msg': 'Case is exist'} 
[2021-11-10 15:24:01] [INFO] [api.py]/[line: 20]/[get] 接收到的参数id <==== None 
[2021-11-10 15:24:01] [INFO] [api.py]/[line: 33]/[get] 将要返回的内容 ====> [{'id': 2, 'node_id': 'node_id1', 'remark': '备注2'}, {'id': 3, 'node_id': 'node_id2', 'remark': '备注122'}, {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'}] 
[2021-11-10 15:24:41] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'} 
[2021-11-10 15:24:51] [INFO] [api.py]/[line: 48]/[post] <TestCase 4> 
[2021-11-10 15:24:51] [INFO] [test_api.py]/[line: 31]/[test_add] {'code': 40001, 'msg': 'Case is exist'} 
[2021-11-10 15:24:51] [INFO] [api.py]/[line: 20]/[get] 接收到的参数id <==== None 
[2021-11-10 15:25:04] [INFO] [api.py]/[line: 33]/[get] 将要返回的内容 ====> [{'id': 2, 'node_id': 'node_id1', 'remark': '备注2'}, {'id': 3, 'node_id': 'node_id2', 'remark': '备注122'}, {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'}] 
[2021-11-10 15:25:04] [INFO] [test_api.py]/[line: 34]/[test_add] {'code': 0, 'msg': {'data': [{'id': 2, 'node_id': 'node_id1', 'remark': '备注2'}, {'id': 3, 'node_id': 'node_id2', 'remark': '备注122'}, {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'}]}} 
[2021-11-10 15:25:23] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'} 
[2021-11-10 15:25:26] [INFO] [api.py]/[line: 48]/[post] <TestCase 4> 
[2021-11-10 15:25:26] [INFO] [test_api.py]/[line: 31]/[test_add] {'code': 40001, 'msg': 'Case is exist'} 
[2021-11-10 15:25:26] [INFO] [api.py]/[line: 20]/[get] 接收到的参数id <==== None 
[2021-11-10 15:25:27] [INFO] [api.py]/[line: 33]/[get] 将要返回的内容 ====> [{'id': 2, 'node_id': 'node_id1', 'remark': '备注2'}, {'id': 3, 'node_id': 'node_id2', 'remark': '备注122'}, {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'}] 
[2021-11-10 15:25:27] [INFO] [test_api.py]/[line: 34]/[test_add] {'code': 0, 'msg': {'data': [{'id': 2, 'node_id': 'node_id1', 'remark': '备注2'}, {'id': 3, 'node_id': 'node_id2', 'remark': '备注122'}, {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'}]}} 
[2021-11-10 15:25:51] [INFO] [api.py]/[line: 20]/[get] 接收到的参数id <==== None 
[2021-11-10 15:25:52] [INFO] [api.py]/[line: 33]/[get] 将要返回的内容 ====> [{'id': 2, 'node_id': 'node_id1', 'remark': '备注2'}, {'id': 3, 'node_id': 'node_id2', 'remark': '备注122'}, {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'}] 
[2021-11-10 15:25:52] [INFO] [test_api.py]/[line: 58]/[test_select] {'code': 0, 'msg': {'data': [{'id': 2, 'node_id': 'node_id1', 'remark': '备注2'}, {'id': 3, 'node_id': 'node_id2', 'remark': '备注122'}, {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'}]}} 
[2021-11-10 15:25:52] [INFO] [api.py]/[line: 20]/[get] 接收到的参数id <==== 2 
[2021-11-10 15:25:52] [INFO] [api.py]/[line: 33]/[get] 将要返回的内容 ====> [{'id': 2, 'node_id': 'node_id1', 'remark': '备注2'}] 
[2021-11-10 15:25:52] [INFO] [test_api.py]/[line: 63]/[test_select] {'code': 0, 'msg': {'data': [{'id': 2, 'node_id': 'node_id1', 'remark': '备注2'}]}} 
[2021-11-10 15:26:25] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'} 
[2021-11-10 15:26:26] [INFO] [api.py]/[line: 48]/[post] <TestCase 4> 
[2021-11-10 15:26:26] [INFO] [test_api.py]/[line: 31]/[test_add] {'code': 40001, 'msg': 'Case is exist'} 
[2021-11-10 15:26:26] [INFO] [api.py]/[line: 20]/[get] 接收到的参数id <==== 4 
[2021-11-10 15:26:26] [INFO] [api.py]/[line: 33]/[get] 将要返回的内容 ====> [{'id': 4, 'node_id': 'node_id3', 'remark': '备注3'}] 
[2021-11-10 15:26:26] [INFO] [test_api.py]/[line: 34]/[test_add] {'code': 0, 'msg': {'data': [{'id': 4, 'node_id': 'node_id3', 'remark': '备注3'}]}} 
[2021-11-10 15:39:46] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 4, 'node_id': 'node_id1', 'remark': '备注3'} 
[2021-11-10 17:49:44] [INFO] [api.py]/[line: 20]/[get] 接收到的参数id <==== None 
[2021-11-10 17:49:44] [INFO] [api.py]/[line: 33]/[get] 将要返回的内容 ====> [{'id': 2, 'node_id': 'node_id1', 'remark': '备注2'}, {'id': 3, 'node_id': 'node_id2', 'remark': '备注122'}, {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'}] 
[2021-11-10 17:49:44] [INFO] [test_api.py]/[line: 58]/[test_select] {'code': 0, 'msg': {'data': [{'id': 2, 'node_id': 'node_id1', 'remark': '备注2'}, {'id': 3, 'node_id': 'node_id2', 'remark': '备注122'}, {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'}]}} 
[2021-11-10 17:49:44] [INFO] [api.py]/[line: 20]/[get] 接收到的参数id <==== 2 
[2021-11-10 17:49:44] [INFO] [api.py]/[line: 33]/[get] 将要返回的内容 ====> [{'id': 2, 'node_id': 'node_id1', 'remark': '备注2'}] 
[2021-11-10 17:49:44] [INFO] [test_api.py]/[line: 63]/[test_select] {'code': 0, 'msg': {'data': [{'id': 2, 'node_id': 'node_id1', 'remark': '备注2'}]}} 
[2021-11-10 18:13:33] [INFO] [api.py]/[line: 20]/[get] 接收到的参数id <==== None 
[2021-11-10 18:13:33] [INFO] [api.py]/[line: 33]/[get] 将要返回的内容 ====> [{'id': 2, 'node_id': 'node_id1', 'remark': '备注2'}, {'id': 3, 'node_id': 'node_id2', 'remark': '备注122'}, {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'}] 
[2021-11-10 18:13:33] [INFO] [test_api.py]/[line: 58]/[test_select] {'code': 0, 'msg': {'data': [{'id': 2, 'node_id': 'node_id1', 'remark': '备注2'}, {'id': 3, 'node_id': 'node_id2', 'remark': '备注122'}, {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'}]}} 
[2021-11-10 18:13:33] [INFO] [api.py]/[line: 20]/[get] 接收到的参数id <==== 2 
[2021-11-10 18:13:34] [INFO] [api.py]/[line: 33]/[get] 将要返回的内容 ====> [{'id': 2, 'node_id': 'node_id1', 'remark': '备注2'}] 
[2021-11-10 18:13:34] [INFO] [test_api.py]/[line: 63]/[test_select] {'code': 0, 'msg': {'data': [{'id': 2, 'node_id': 'node_id1', 'remark': '备注2'}]}} 
[2021-11-10 18:17:28] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 4, 'name': 'node_id1', 'info': '备注3'} 
[2021-11-10 18:17:28] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 4, 'name': 'node_id1', 'info': '备注3'} 
[2021-11-10 18:19:06] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 1, 'name': '曾甜', 'info': '测试工程师'} 
[2021-11-10 18:19:06] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 1, 'name': '曾甜', 'info': '测试工程师'} 
[2021-11-10 18:19:33] [INFO] [api.py]/[line: 20]/[get] 接收到的参数id <==== None 
[2021-11-10 18:19:33] [INFO] [api.py]/[line: 20]/[get] 接收到的参数id <==== None 
[2021-11-10 18:20:59] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': '1', 'name': '曾甜', 'info': '测试工程师'} 
[2021-11-10 18:20:59] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': '1', 'name': '曾甜', 'info': '测试工程师'} 
[2021-11-10 18:21:21] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'} 
[2021-11-10 18:21:21] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'} 
[2021-11-10 18:22:28] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'} 
[2021-11-10 18:22:29] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'} 
[2021-11-10 18:22:48] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'} 
[2021-11-10 18:22:48] [INFO] [test_api.py]/[line: 31]/[test_add] <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>sqlalchemy.exc.OperationalError: (pymysql.err.OperationalError) (1054, &quot;Unknown column &#x27;test_case.node_id&#x27; in &#x27;field list&#x27;&quot;)
[SQL: SELECT test_case.id AS test_case_id, test_case.node_id AS test_case_node_id, test_case.remark AS test_case_remark 
FROM test_case 
WHERE test_case.id = %(id_1)s 
 LIMIT %(param_1)s]
[parameters: {&#x27;id_1&#x27;: 4, &#x27;param_1&#x27;: 1}]
(Background on this error at: https://sqlalche.me/e/14/e3q8) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 2212209024448,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Tzy4NpPtFP9NrB1NaDE9";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>sqlalchemy.exc.OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (pymysql.err.OperationalError) (1054, &quot;Unknown column &#x27;test_case.node_id&#x27; in &#x27;field list&#x27;&quot;)
[SQL: SELECT test_case.id AS test_case_id, test_case.node_id AS test_case_node_id, test_case.remark AS test_case_remark 
FROM test_case 
WHERE test_case.id = %(id_1)s 
 LIMIT %(param_1)s]
[parameters: {&#x27;id_1&#x27;: 4, &#x27;param_1&#x27;: 1}]
(Background on this error at: https://sqlalche.me/e/14/e3q8)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2212209059104">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1799</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>for fn in self.dialect.dispatch.do_execute:</pre>
<pre class="line before"><span class="ws">                        </span>if fn(cursor, statement, parameters, context):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, statement, parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2212209059152">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">717</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2212209058960">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-2212209059200">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-2212209059056">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\connections.py"</cite>,
      line <em class="line">548</em>,
      in <code class="function">query</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line before"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line current"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre></div>
</div>

<li><div class="frame" id="frame-2212209059248">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\connections.py"</cite>,
      line <em class="line">775</em>,
      in <code class="function">_read_query_result</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                </span>result.unbuffered_active = False</pre>
<pre class="line before"><span class="ws">                </span>result.connection = None</pre>
<pre class="line before"><span class="ws">                </span>raise</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>result = MySQLResult(self)</pre>
<pre class="line current"><span class="ws">            </span>result.read()</pre>
<pre class="line after"><span class="ws">        </span>self._result = result</pre>
<pre class="line after"><span class="ws">        </span>if result.server_status is not None:</pre>
<pre class="line after"><span class="ws">            </span>self.server_status = result.server_status</pre>
<pre class="line after"><span class="ws">        </span>return result.affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2212209059296">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\connections.py"</cite>,
      line <em class="line">1156</em>,
      in <code class="function">read</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>if self.unbuffered_active:</pre>
<pre class="line before"><span class="ws">            </span>self._finish_unbuffered_query()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def read(self):</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>first_packet = self.connection._read_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if first_packet.is_ok_packet():</pre>
<pre class="line after"><span class="ws">                </span>self._read_ok_packet(first_packet)</pre>
<pre class="line after"><span class="ws">            </span>elif first_packet.is_load_local_packet():</pre>
<pre class="line after"><span class="ws">                </span>self._read_load_local_packet(first_packet)</pre></div>
</div>

<li><div class="frame" id="frame-2212209059344">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\connections.py"</cite>,
      line <em class="line">725</em>,
      in <code class="function">_read_packet</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>packet = packet_type(bytes(buff), self.encoding)</pre>
<pre class="line before"><span class="ws">        </span>if packet.is_error_packet():</pre>
<pre class="line before"><span class="ws">            </span>if self._result is not None and self._result.unbuffered_active is True:</pre>
<pre class="line before"><span class="ws">                </span>self._result.unbuffered_active = False</pre>
<pre class="line current"><span class="ws">            </span>packet.raise_for_error()</pre>
<pre class="line after"><span class="ws">        </span>return packet</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _read_bytes(self, num_bytes):</pre>
<pre class="line after"><span class="ws">        </span>self._sock.settimeout(self._read_timeout)</pre>
<pre class="line after"><span class="ws">        </span>while True:</pre></div>
</div>

<li><div class="frame" id="frame-2212209059392">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\protocol.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">raise_for_error</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>self.rewind()</pre>
<pre class="line before"><span class="ws">        </span>self.advance(1)  # field_count == error (we already know that)</pre>
<pre class="line before"><span class="ws">        </span>errno = self.read_uint16()</pre>
<pre class="line before"><span class="ws">        </span>if DEBUG:</pre>
<pre class="line before"><span class="ws">            </span>print(&quot;errno =&quot;, errno)</pre>
<pre class="line current"><span class="ws">        </span>err.raise_mysql_exception(self._data)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def dump(self):</pre>
<pre class="line after"><span class="ws">        </span>dump_packet(self._data)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2212209059440">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\err.py"</cite>,
      line <em class="line">143</em>,
      in <code class="function">raise_mysql_exception</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>errno = struct.unpack(&quot;&lt;h&quot;, data[1:3])[0]</pre>
<pre class="line before"><span class="ws">    </span>errval = data[9:].decode(&quot;utf-8&quot;, &quot;replace&quot;)</pre>
<pre class="line before"><span class="ws">    </span>errorclass = error_map.get(errno)</pre>
<pre class="line before"><span class="ws">    </span>if errorclass is None:</pre>
<pre class="line before"><span class="ws">        </span>errorclass = InternalError if errno &lt; 1000 else OperationalError</pre>
<pre class="line current"><span class="ws">    </span>raise errorclass(errno, errval)</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2212209024496">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-2212209024640">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2212209024544">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask_cors\extension.py"</cite>,
      line <em class="line">165</em>,
      in <code class="function">wrapped_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre>
<pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre>
<pre class="line before"><span class="ws">        </span>if options.get(&#x27;intercept_exceptions&#x27;, True):</pre>
<pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre>
<pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))</pre>
<pre class="line after"><span class="ws">                </span>return wrapped_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app, &#x27;handle_exception&#x27;):</pre>
<pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre>
<pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div>
</div>

<li><div class="frame" id="frame-2212209024688">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask_restful\__init__.py"</cite>,
      line <em class="line">271</em>,
      in <code class="function">error_router</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>if self._has_fr_route():</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>return self.handle_error(e)</pre>
<pre class="line before"><span class="ws">            </span>except Exception:</pre>
<pre class="line before"><span class="ws">                </span>pass  # Fall through to original handler</pre>
<pre class="line current"><span class="ws">        </span>return original_handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def handle_error(self, e):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Error handler for the API transforms a raised exception into a Flask</pre>
<pre class="line after"><span class="ws">        </span>response, with the appropriate HTTP status code and body.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2212209024592">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2212209024736">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-2212209024784">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask_cors\extension.py"</cite>,
      line <em class="line">165</em>,
      in <code class="function">wrapped_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre>
<pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre>
<pre class="line before"><span class="ws">        </span>if options.get(&#x27;intercept_exceptions&#x27;, True):</pre>
<pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre>
<pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))</pre>
<pre class="line after"><span class="ws">                </span>return wrapped_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app, &#x27;handle_exception&#x27;):</pre>
<pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre>
<pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div>
</div>

<li><div class="frame" id="frame-2212209024976">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask_restful\__init__.py"</cite>,
      line <em class="line">271</em>,
      in <code class="function">error_router</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>if self._has_fr_route():</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>return self.handle_error(e)</pre>
<pre class="line before"><span class="ws">            </span>except Exception:</pre>
<pre class="line before"><span class="ws">                </span>pass  # Fall through to original handler</pre>
<pre class="line current"><span class="ws">        </span>return original_handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def handle_error(self, e):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Error handler for the API transforms a raised exception into a Flask</pre>
<pre class="line after"><span class="ws">        </span>response, with the appropriate HTTP status code and body.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2212209024928">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2212209024832">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2212209024880">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask_restful\__init__.py"</cite>,
      line <em class="line">467</em>,
      in <code class="function">wrapper</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:param resource: The resource as a flask view function</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>@wraps(resource)</pre>
<pre class="line before"><span class="ws">        </span>def wrapper(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">            </span>resp = resource(*args, **kwargs)</pre>
<pre class="line after"><span class="ws">            </span>if isinstance(resp, ResponseBase):  # There may be a better way to test</pre>
<pre class="line after"><span class="ws">                </span>return resp</pre>
<pre class="line after"><span class="ws">            </span>data, code, headers = unpack(resp)</pre>
<pre class="line after"><span class="ws">            </span>return self.make_response(data, code, headers=headers)</pre>
<pre class="line after"><span class="ws">        </span>return wrapper</pre></div>
</div>

<li><div class="frame" id="frame-2212209058000">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask\views.py"</cite>,
      line <em class="line">84</em>,
      in <code class="function">view</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>constructor of the class.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>def view(*args: t.Any, **kwargs: t.Any) -&gt; ResponseReturnValue:</pre>
<pre class="line before"><span class="ws">            </span>self = view.view_class(*class_args, **class_kwargs)  # type: ignore</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(self.dispatch_request)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if cls.decorators:</pre>
<pre class="line after"><span class="ws">            </span>view.__name__ = name</pre>
<pre class="line after"><span class="ws">            </span>view.__module__ = cls.__module__</pre>
<pre class="line after"><span class="ws">            </span>for decorator in cls.decorators:</pre></div>
</div>

<li><div class="frame" id="frame-2212209057952">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask_restful\__init__.py"</cite>,
      line <em class="line">582</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>decorators = self.method_decorators</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>for decorator in decorators:</pre>
<pre class="line before"><span class="ws">            </span>meth = decorator(meth)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>resp = meth(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if isinstance(resp, ResponseBase):  # There may be a better way to test</pre>
<pre class="line after"><span class="ws">            </span>return resp</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>representations = self.representations or OrderedDict()</pre></div>
</div>

<li><div class="frame" id="frame-2212209057856">
  <h4>File <cite class="filename">"D:\feisu\20211102\api.py"</cite>,
      line <em class="line">47</em>,
      in <code class="function">post</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>case_data = request.json</pre>
<pre class="line before"><span class="ws">        </span>logger.info(f&quot;接收到的参数 &lt;==== {case_data}&quot;)</pre>
<pre class="line before"><span class="ws">        </span># 获取调用该接口传入的json数据中的id</pre>
<pre class="line before"><span class="ws">        </span>case_id = case_data.get(&quot;id&quot;)</pre>
<pre class="line before"><span class="ws">        </span># 使用数据体中的id进行查询，查询到了则使用下述的else逻辑</pre>
<pre class="line current"><span class="ws">        </span>exist = TestCase.query.filter_by(id=case_id).first()</pre>
<pre class="line after"><span class="ws">        </span>logger.info(f&quot;{exist}&quot;)</pre>
<pre class="line after"><span class="ws">        </span># 不存在的时候进行数据的新增操作</pre>
<pre class="line after"><span class="ws">        </span>if not exist:</pre>
<pre class="line after"><span class="ws">            </span>testcase = TestCase(**case_data)</pre>
<pre class="line after"><span class="ws">            </span># 处理不符合字符串的格式的内容 转换成json字符串</pre></div>
</div>

<li><div class="frame" id="frame-2212209057904">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2762</em>,
      in <code class="function">first</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2212209058048">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2846</em>,
      in <code class="function">_iter</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def _iter(self):</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&quot;_sa_orm_load_options&quot;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2212209058096">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1689</em>,
      in <code class="function">execute</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>execution_options = execution_options.union(</pre>
<pre class="line before"><span class="ws">                </span>dict(future_result=False)</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>conn = self._connection_for_bind(bind)</pre>
<pre class="line current"><span class="ws">        </span>result = conn._execute_20(statement, params or {}, execution_options)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line after"><span class="ws">            </span>result = compile_state_cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2212209058144">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1611</em>,
      in <code class="function">_execute_20</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>util.raise_(</pre>
<pre class="line before"><span class="ws">                </span>exc.ObjectNotExecutableError(statement), replace_context=err</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(self, args_10style, kwargs_10style, execution_options)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def exec_driver_sql(</pre>
<pre class="line after"><span class="ws">        </span>self, statement, parameters=None, execution_options=None</pre>
<pre class="line after"><span class="ws">    </span>):</pre>
<pre class="line after"><span class="ws">        </span>r&quot;&quot;&quot;Executes a SQL statement construct and returns a</pre></div>
</div>

<li><div class="frame" id="frame-2212209058192">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">325</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _execute_on_connection(</pre>
<pre class="line before"><span class="ws">        </span>self, connection, multiparams, params, execution_options, _force=False</pre>
<pre class="line before"><span class="ws">    </span>):</pre>
<pre class="line before"><span class="ws">        </span>if _force or self.supports_execution:</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, multiparams, params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2212209058240">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1478</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2212209058288">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1842</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span># CursorResult already exhausted rows / has no rows.</pre>
<pre class="line before"><span class="ws">                    </span># close us now</pre>
<pre class="line before"><span class="ws">                    </span>branched.close()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, statement, parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2212209058336">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2023</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>self._autorollback()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>util.raise_(newraise, with_traceback=exc_info[2], from_=e)</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line current"><span class="ws">                </span>util.raise_(</pre>
<pre class="line after"><span class="ws">                    </span>sqlalchemy_exception, with_traceback=exc_info[2], from_=e</pre>
<pre class="line after"><span class="ws">                </span>)</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>util.raise_(exc_info[1], with_traceback=exc_info[2])</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2212209058384">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\util\compat.py"</cite>,
      line <em class="line">207</em>,
      in <code class="function">raise_</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span># intermediary exception does not change, but we can&#x27;t figure</pre>
<pre class="line before"><span class="ws">            </span># that out.</pre>
<pre class="line before"><span class="ws">            </span>exception.__cause__ = replace_context</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>raise exception</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span># credit to</pre>
<pre class="line after"><span class="ws">            </span># https://cosmicpercolator.com/2016/01/13/exception-leaks-in-python-2-and-3/</pre>
<pre class="line after"><span class="ws">            </span># as the __traceback__ object creates a cycle</pre>
<pre class="line after"><span class="ws">            </span>del exception, replace_context, from_, with_traceback</pre></div>
</div>

<li><div class="frame" id="frame-2212209058432">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1799</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>for fn in self.dialect.dispatch.do_execute:</pre>
<pre class="line before"><span class="ws">                        </span>if fn(cursor, statement, parameters, context):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, statement, parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2212209058480">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">717</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2212209058528">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-2212209058576">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-2212209058624">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\connections.py"</cite>,
      line <em class="line">548</em>,
      in <code class="function">query</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line before"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line current"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre></div>
</div>

<li><div class="frame" id="frame-2212209058672">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\connections.py"</cite>,
      line <em class="line">775</em>,
      in <code class="function">_read_query_result</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                </span>result.unbuffered_active = False</pre>
<pre class="line before"><span class="ws">                </span>result.connection = None</pre>
<pre class="line before"><span class="ws">                </span>raise</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>result = MySQLResult(self)</pre>
<pre class="line current"><span class="ws">            </span>result.read()</pre>
<pre class="line after"><span class="ws">        </span>self._result = result</pre>
<pre class="line after"><span class="ws">        </span>if result.server_status is not None:</pre>
<pre class="line after"><span class="ws">            </span>self.server_status = result.server_status</pre>
<pre class="line after"><span class="ws">        </span>return result.affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2212209058720">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\connections.py"</cite>,
      line <em class="line">1156</em>,
      in <code class="function">read</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>if self.unbuffered_active:</pre>
<pre class="line before"><span class="ws">            </span>self._finish_unbuffered_query()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def read(self):</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>first_packet = self.connection._read_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if first_packet.is_ok_packet():</pre>
<pre class="line after"><span class="ws">                </span>self._read_ok_packet(first_packet)</pre>
<pre class="line after"><span class="ws">            </span>elif first_packet.is_load_local_packet():</pre>
<pre class="line after"><span class="ws">                </span>self._read_load_local_packet(first_packet)</pre></div>
</div>

<li><div class="frame" id="frame-2212209058768">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\connections.py"</cite>,
      line <em class="line">725</em>,
      in <code class="function">_read_packet</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>packet = packet_type(bytes(buff), self.encoding)</pre>
<pre class="line before"><span class="ws">        </span>if packet.is_error_packet():</pre>
<pre class="line before"><span class="ws">            </span>if self._result is not None and self._result.unbuffered_active is True:</pre>
<pre class="line before"><span class="ws">                </span>self._result.unbuffered_active = False</pre>
<pre class="line current"><span class="ws">            </span>packet.raise_for_error()</pre>
<pre class="line after"><span class="ws">        </span>return packet</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _read_bytes(self, num_bytes):</pre>
<pre class="line after"><span class="ws">        </span>self._sock.settimeout(self._read_timeout)</pre>
<pre class="line after"><span class="ws">        </span>while True:</pre></div>
</div>

<li><div class="frame" id="frame-2212209058816">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\protocol.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">raise_for_error</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>self.rewind()</pre>
<pre class="line before"><span class="ws">        </span>self.advance(1)  # field_count == error (we already know that)</pre>
<pre class="line before"><span class="ws">        </span>errno = self.read_uint16()</pre>
<pre class="line before"><span class="ws">        </span>if DEBUG:</pre>
<pre class="line before"><span class="ws">            </span>print(&quot;errno =&quot;, errno)</pre>
<pre class="line current"><span class="ws">        </span>err.raise_mysql_exception(self._data)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def dump(self):</pre>
<pre class="line after"><span class="ws">        </span>dump_packet(self._data)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2212209058864">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\err.py"</cite>,
      line <em class="line">143</em>,
      in <code class="function">raise_mysql_exception</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>errno = struct.unpack(&quot;&lt;h&quot;, data[1:3])[0]</pre>
<pre class="line before"><span class="ws">    </span>errval = data[9:].decode(&quot;utf-8&quot;, &quot;replace&quot;)</pre>
<pre class="line before"><span class="ws">    </span>errorclass = error_map.get(errno)</pre>
<pre class="line before"><span class="ws">    </span>if errorclass is None:</pre>
<pre class="line before"><span class="ws">        </span>errorclass = InternalError if errno &lt; 1000 else OperationalError</pre>
<pre class="line current"><span class="ws">    </span>raise errorclass(errno, errval)</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (pymysql.err.OperationalError) (1054, &quot;Unknown column &#x27;test_case.node_id&#x27; in &#x27;field list&#x27;&quot;)
[SQL: SELECT test_case.id AS test_case_id, test_case.node_id AS test_case_node_id, test_case.remark AS test_case_remark 
FROM test_case 
WHERE test_case.id = %(id_1)s 
 LIMIT %(param_1)s]
[parameters: {&#x27;id_1&#x27;: 4, &#x27;param_1&#x27;: 1}]
(Background on this error at: https://sqlalche.me/e/14/e3q8)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py&quot;, line 1799, in _execute_context
    self.dialect.do_execute(
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\engine\default.py&quot;, line 717, in do_execute
    cursor.execute(statement, parameters)
  File &quot;D:\feisu\Lib\site-packages\pymysql\cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;D:\feisu\Lib\site-packages\pymysql\cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;D:\feisu\Lib\site-packages\pymysql\connections.py&quot;, line 548, in query
    self._affected_rows = self._read_query_result(unbuffered=unbuffered)
  File &quot;D:\feisu\Lib\site-packages\pymysql\connections.py&quot;, line 775, in _read_query_result
    result.read()
  File &quot;D:\feisu\Lib\site-packages\pymysql\connections.py&quot;, line 1156, in read
    first_packet = self.connection._read_packet()
  File &quot;D:\feisu\Lib\site-packages\pymysql\connections.py&quot;, line 725, in _read_packet
    packet.raise_for_error()
  File &quot;D:\feisu\Lib\site-packages\pymysql\protocol.py&quot;, line 221, in raise_for_error
    err.raise_mysql_exception(self._data)
  File &quot;D:\feisu\Lib\site-packages\pymysql\err.py&quot;, line 143, in raise_mysql_exception
    raise errorclass(errno, errval)
pymysql.err.OperationalError: (1054, &quot;Unknown column &#x27;test_case.node_id&#x27; in &#x27;field list&#x27;&quot;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &quot;D:\feisu\Lib\site-packages\flask\app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;D:\feisu\Lib\site-packages\flask\app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;D:\feisu\Lib\site-packages\flask_cors\extension.py&quot;, line 165, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File &quot;D:\feisu\Lib\site-packages\flask_restful\__init__.py&quot;, line 271, in error_router
    return original_handler(e)
  File &quot;D:\feisu\Lib\site-packages\flask\app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;D:\feisu\Lib\site-packages\flask\app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;D:\feisu\Lib\site-packages\flask_cors\extension.py&quot;, line 165, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File &quot;D:\feisu\Lib\site-packages\flask_restful\__init__.py&quot;, line 271, in error_router
    return original_handler(e)
  File &quot;D:\feisu\Lib\site-packages\flask\app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;D:\feisu\Lib\site-packages\flask\app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;D:\feisu\Lib\site-packages\flask_restful\__init__.py&quot;, line 467, in wrapper
    resp = resource(*args, **kwargs)
  File &quot;D:\feisu\Lib\site-packages\flask\views.py&quot;, line 84, in view
    return current_app.ensure_sync(self.dispatch_request)(*args, **kwargs)
  File &quot;D:\feisu\Lib\site-packages\flask_restful\__init__.py&quot;, line 582, in dispatch_request
    resp = meth(*args, **kwargs)
  File &quot;D:\feisu\20211102\api.py&quot;, line 47, in post
    exist = TestCase.query.filter_by(id=case_id).first()
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\orm\query.py&quot;, line 2762, in first
    return self.limit(1)._iter().first()
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\orm\query.py&quot;, line 2846, in _iter
    result = self.session.execute(
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\orm\session.py&quot;, line 1689, in execute
    result = conn._execute_20(statement, params or {}, execution_options)
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py&quot;, line 1611, in _execute_20
    return meth(self, args_10style, kwargs_10style, execution_options)
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\sql\elements.py&quot;, line 325, in _execute_on_connection
    return connection._execute_clauseelement(
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py&quot;, line 1478, in _execute_clauseelement
    ret = self._execute_context(
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py&quot;, line 1842, in _execute_context
    self._handle_dbapi_exception(
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py&quot;, line 2023, in _handle_dbapi_exception
    util.raise_(
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\util\compat.py&quot;, line 207, in raise_
    raise exception
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py&quot;, line 1799, in _execute_context
    self.dialect.do_execute(
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\engine\default.py&quot;, line 717, in do_execute
    cursor.execute(statement, parameters)
  File &quot;D:\feisu\Lib\site-packages\pymysql\cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;D:\feisu\Lib\site-packages\pymysql\cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;D:\feisu\Lib\site-packages\pymysql\connections.py&quot;, line 548, in query
    self._affected_rows = self._read_query_result(unbuffered=unbuffered)
  File &quot;D:\feisu\Lib\site-packages\pymysql\connections.py&quot;, line 775, in _read_query_result
    result.read()
  File &quot;D:\feisu\Lib\site-packages\pymysql\connections.py&quot;, line 1156, in read
    first_packet = self.connection._read_packet()
  File &quot;D:\feisu\Lib\site-packages\pymysql\connections.py&quot;, line 725, in _read_packet
    packet.raise_for_error()
  File &quot;D:\feisu\Lib\site-packages\pymysql\protocol.py&quot;, line 221, in raise_for_error
    err.raise_mysql_exception(self._data)
  File &quot;D:\feisu\Lib\site-packages\pymysql\err.py&quot;, line 143, in raise_mysql_exception
    raise errorclass(errno, errval)
sqlalchemy.exc.OperationalError: (pymysql.err.OperationalError) (1054, &quot;Unknown column &#x27;test_case.node_id&#x27; in &#x27;field list&#x27;&quot;)
[SQL: SELECT test_case.id AS test_case_id, test_case.node_id AS test_case_node_id, test_case.remark AS test_case_remark 
FROM test_case 
WHERE test_case.id = %(id_1)s 
 LIMIT %(param_1)s]
[parameters: {&#x27;id_1&#x27;: 4, &#x27;param_1&#x27;: 1}]
(Background on this error at: https://sqlalche.me/e/14/e3q8)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py", line 1799, in _execute_context
    self.dialect.do_execute(
  File "D:\feisu\Lib\site-packages\sqlalchemy\engine\default.py", line 717, in do_execute
    cursor.execute(statement, parameters)
  File "D:\feisu\Lib\site-packages\pymysql\cursors.py", line 148, in execute
    result = self._query(query)
  File "D:\feisu\Lib\site-packages\pymysql\cursors.py", line 310, in _query
    conn.query(q)
  File "D:\feisu\Lib\site-packages\pymysql\connections.py", line 548, in query
    self._affected_rows = self._read_query_result(unbuffered=unbuffered)
  File "D:\feisu\Lib\site-packages\pymysql\connections.py", line 775, in _read_query_result
    result.read()
  File "D:\feisu\Lib\site-packages\pymysql\connections.py", line 1156, in read
    first_packet = self.connection._read_packet()
  File "D:\feisu\Lib\site-packages\pymysql\connections.py", line 725, in _read_packet
    packet.raise_for_error()
  File "D:\feisu\Lib\site-packages\pymysql\protocol.py", line 221, in raise_for_error
    err.raise_mysql_exception(self._data)
  File "D:\feisu\Lib\site-packages\pymysql\err.py", line 143, in raise_mysql_exception
    raise errorclass(errno, errval)
pymysql.err.OperationalError: (1054, "Unknown column 'test_case.node_id' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\feisu\Lib\site-packages\flask\app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "D:\feisu\Lib\site-packages\flask\app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "D:\feisu\Lib\site-packages\flask_cors\extension.py", line 165, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File "D:\feisu\Lib\site-packages\flask_restful\__init__.py", line 271, in error_router
    return original_handler(e)
  File "D:\feisu\Lib\site-packages\flask\app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "D:\feisu\Lib\site-packages\flask\app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "D:\feisu\Lib\site-packages\flask_cors\extension.py", line 165, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File "D:\feisu\Lib\site-packages\flask_restful\__init__.py", line 271, in error_router
    return original_handler(e)
  File "D:\feisu\Lib\site-packages\flask\app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "D:\feisu\Lib\site-packages\flask\app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "D:\feisu\Lib\site-packages\flask_restful\__init__.py", line 467, in wrapper
    resp = resource(*args, **kwargs)
  File "D:\feisu\Lib\site-packages\flask\views.py", line 84, in view
    return current_app.ensure_sync(self.dispatch_request)(*args, **kwargs)
  File "D:\feisu\Lib\site-packages\flask_restful\__init__.py", line 582, in dispatch_request
    resp = meth(*args, **kwargs)
  File "D:\feisu\20211102\api.py", line 47, in post
    exist = TestCase.query.filter_by(id=case_id).first()
  File "D:\feisu\Lib\site-packages\sqlalchemy\orm\query.py", line 2762, in first
    return self.limit(1)._iter().first()
  File "D:\feisu\Lib\site-packages\sqlalchemy\orm\query.py", line 2846, in _iter
    result = self.session.execute(
  File "D:\feisu\Lib\site-packages\sqlalchemy\orm\session.py", line 1689, in execute
    result = conn._execute_20(statement, params or {}, execution_options)
  File "D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py", line 1611, in _execute_20
    return meth(self, args_10style, kwargs_10style, execution_options)
  File "D:\feisu\Lib\site-packages\sqlalchemy\sql\elements.py", line 325, in _execute_on_connection
    return connection._execute_clauseelement(
  File "D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py", line 1478, in _execute_clauseelement
    ret = self._execute_context(
  File "D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py", line 1842, in _execute_context
    self._handle_dbapi_exception(
  File "D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py", line 2023, in _handle_dbapi_exception
    util.raise_(
  File "D:\feisu\Lib\site-packages\sqlalchemy\util\compat.py", line 207, in raise_
    raise exception
  File "D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py", line 1799, in _execute_context
    self.dialect.do_execute(
  File "D:\feisu\Lib\site-packages\sqlalchemy\engine\default.py", line 717, in do_execute
    cursor.execute(statement, parameters)
  File "D:\feisu\Lib\site-packages\pymysql\cursors.py", line 148, in execute
    result = self._query(query)
  File "D:\feisu\Lib\site-packages\pymysql\cursors.py", line 310, in _query
    conn.query(q)
  File "D:\feisu\Lib\site-packages\pymysql\connections.py", line 548, in query
    self._affected_rows = self._read_query_result(unbuffered=unbuffered)
  File "D:\feisu\Lib\site-packages\pymysql\connections.py", line 775, in _read_query_result
    result.read()
  File "D:\feisu\Lib\site-packages\pymysql\connections.py", line 1156, in read
    first_packet = self.connection._read_packet()
  File "D:\feisu\Lib\site-packages\pymysql\connections.py", line 725, in _read_packet
    packet.raise_for_error()
  File "D:\feisu\Lib\site-packages\pymysql\protocol.py", line 221, in raise_for_error
    err.raise_mysql_exception(self._data)
  File "D:\feisu\Lib\site-packages\pymysql\err.py", line 143, in raise_mysql_exception
    raise errorclass(errno, errval)
sqlalchemy.exc.OperationalError: (pymysql.err.OperationalError) (1054, "Unknown column 'test_case.node_id' in 'field list'")
[SQL: SELECT test_case.id AS test_case_id, test_case.node_id AS test_case_node_id, test_case.remark AS test_case_remark 
FROM test_case 
WHERE test_case.id = %(id_1)s 
 LIMIT %(param_1)s]
[parameters: {'id_1': 4, 'param_1': 1}]
(Background on this error at: https://sqlalche.me/e/14/e3q8)

-->
 
[2021-11-10 18:22:48] [INFO] [api.py]/[line: 20]/[get] 接收到的参数id <==== 4 
[2021-11-10 18:22:48] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 4, 'node_id': 'node_id3', 'remark': '备注3'} 
[2021-11-10 18:22:48] [INFO] [test_api.py]/[line: 31]/[test_add] <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>sqlalchemy.exc.OperationalError: (pymysql.err.OperationalError) (1054, &quot;Unknown column &#x27;test_case.node_id&#x27; in &#x27;field list&#x27;&quot;)
[SQL: SELECT test_case.id AS test_case_id, test_case.node_id AS test_case_node_id, test_case.remark AS test_case_remark 
FROM test_case 
WHERE test_case.id = %(id_1)s 
 LIMIT %(param_1)s]
[parameters: {&#x27;id_1&#x27;: 4, &#x27;param_1&#x27;: 1}]
(Background on this error at: https://sqlalche.me/e/14/e3q8) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 2212215021520,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Tzy4NpPtFP9NrB1NaDE9";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>sqlalchemy.exc.OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (pymysql.err.OperationalError) (1054, &quot;Unknown column &#x27;test_case.node_id&#x27; in &#x27;field list&#x27;&quot;)
[SQL: SELECT test_case.id AS test_case_id, test_case.node_id AS test_case_node_id, test_case.remark AS test_case_remark 
FROM test_case 
WHERE test_case.id = %(id_1)s 
 LIMIT %(param_1)s]
[parameters: {&#x27;id_1&#x27;: 4, &#x27;param_1&#x27;: 1}]
(Background on this error at: https://sqlalche.me/e/14/e3q8)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2212220933984">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1799</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>for fn in self.dialect.dispatch.do_execute:</pre>
<pre class="line before"><span class="ws">                        </span>if fn(cursor, statement, parameters, context):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, statement, parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2212220934032">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">717</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2212220933840">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-2212220934080">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-2212220933936">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\connections.py"</cite>,
      line <em class="line">548</em>,
      in <code class="function">query</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line before"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line current"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre></div>
</div>

<li><div class="frame" id="frame-2212220934128">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\connections.py"</cite>,
      line <em class="line">775</em>,
      in <code class="function">_read_query_result</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                </span>result.unbuffered_active = False</pre>
<pre class="line before"><span class="ws">                </span>result.connection = None</pre>
<pre class="line before"><span class="ws">                </span>raise</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>result = MySQLResult(self)</pre>
<pre class="line current"><span class="ws">            </span>result.read()</pre>
<pre class="line after"><span class="ws">        </span>self._result = result</pre>
<pre class="line after"><span class="ws">        </span>if result.server_status is not None:</pre>
<pre class="line after"><span class="ws">            </span>self.server_status = result.server_status</pre>
<pre class="line after"><span class="ws">        </span>return result.affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2212220934176">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\connections.py"</cite>,
      line <em class="line">1156</em>,
      in <code class="function">read</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>if self.unbuffered_active:</pre>
<pre class="line before"><span class="ws">            </span>self._finish_unbuffered_query()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def read(self):</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>first_packet = self.connection._read_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if first_packet.is_ok_packet():</pre>
<pre class="line after"><span class="ws">                </span>self._read_ok_packet(first_packet)</pre>
<pre class="line after"><span class="ws">            </span>elif first_packet.is_load_local_packet():</pre>
<pre class="line after"><span class="ws">                </span>self._read_load_local_packet(first_packet)</pre></div>
</div>

<li><div class="frame" id="frame-2212220934224">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\connections.py"</cite>,
      line <em class="line">725</em>,
      in <code class="function">_read_packet</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>packet = packet_type(bytes(buff), self.encoding)</pre>
<pre class="line before"><span class="ws">        </span>if packet.is_error_packet():</pre>
<pre class="line before"><span class="ws">            </span>if self._result is not None and self._result.unbuffered_active is True:</pre>
<pre class="line before"><span class="ws">                </span>self._result.unbuffered_active = False</pre>
<pre class="line current"><span class="ws">            </span>packet.raise_for_error()</pre>
<pre class="line after"><span class="ws">        </span>return packet</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _read_bytes(self, num_bytes):</pre>
<pre class="line after"><span class="ws">        </span>self._sock.settimeout(self._read_timeout)</pre>
<pre class="line after"><span class="ws">        </span>while True:</pre></div>
</div>

<li><div class="frame" id="frame-2212220934272">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\protocol.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">raise_for_error</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>self.rewind()</pre>
<pre class="line before"><span class="ws">        </span>self.advance(1)  # field_count == error (we already know that)</pre>
<pre class="line before"><span class="ws">        </span>errno = self.read_uint16()</pre>
<pre class="line before"><span class="ws">        </span>if DEBUG:</pre>
<pre class="line before"><span class="ws">            </span>print(&quot;errno =&quot;, errno)</pre>
<pre class="line current"><span class="ws">        </span>err.raise_mysql_exception(self._data)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def dump(self):</pre>
<pre class="line after"><span class="ws">        </span>dump_packet(self._data)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2212220934320">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\err.py"</cite>,
      line <em class="line">143</em>,
      in <code class="function">raise_mysql_exception</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>errno = struct.unpack(&quot;&lt;h&quot;, data[1:3])[0]</pre>
<pre class="line before"><span class="ws">    </span>errval = data[9:].decode(&quot;utf-8&quot;, &quot;replace&quot;)</pre>
<pre class="line before"><span class="ws">    </span>errorclass = error_map.get(errno)</pre>
<pre class="line before"><span class="ws">    </span>if errorclass is None:</pre>
<pre class="line before"><span class="ws">        </span>errorclass = InternalError if errno &lt; 1000 else OperationalError</pre>
<pre class="line current"><span class="ws">    </span>raise errorclass(errno, errval)</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2212220932208">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-2212220932352">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2212220932256">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask_cors\extension.py"</cite>,
      line <em class="line">165</em>,
      in <code class="function">wrapped_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre>
<pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre>
<pre class="line before"><span class="ws">        </span>if options.get(&#x27;intercept_exceptions&#x27;, True):</pre>
<pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre>
<pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))</pre>
<pre class="line after"><span class="ws">                </span>return wrapped_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app, &#x27;handle_exception&#x27;):</pre>
<pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre>
<pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div>
</div>

<li><div class="frame" id="frame-2212220932400">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask_restful\__init__.py"</cite>,
      line <em class="line">271</em>,
      in <code class="function">error_router</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>if self._has_fr_route():</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>return self.handle_error(e)</pre>
<pre class="line before"><span class="ws">            </span>except Exception:</pre>
<pre class="line before"><span class="ws">                </span>pass  # Fall through to original handler</pre>
<pre class="line current"><span class="ws">        </span>return original_handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def handle_error(self, e):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Error handler for the API transforms a raised exception into a Flask</pre>
<pre class="line after"><span class="ws">        </span>response, with the appropriate HTTP status code and body.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2212220932304">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2212220932448">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-2212220932496">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask_cors\extension.py"</cite>,
      line <em class="line">165</em>,
      in <code class="function">wrapped_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre>
<pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre>
<pre class="line before"><span class="ws">        </span>if options.get(&#x27;intercept_exceptions&#x27;, True):</pre>
<pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre>
<pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))</pre>
<pre class="line after"><span class="ws">                </span>return wrapped_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app, &#x27;handle_exception&#x27;):</pre>
<pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre>
<pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div>
</div>

<li><div class="frame" id="frame-2212220932544">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask_restful\__init__.py"</cite>,
      line <em class="line">271</em>,
      in <code class="function">error_router</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>if self._has_fr_route():</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>return self.handle_error(e)</pre>
<pre class="line before"><span class="ws">            </span>except Exception:</pre>
<pre class="line before"><span class="ws">                </span>pass  # Fall through to original handler</pre>
<pre class="line current"><span class="ws">        </span>return original_handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def handle_error(self, e):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Error handler for the API transforms a raised exception into a Flask</pre>
<pre class="line after"><span class="ws">        </span>response, with the appropriate HTTP status code and body.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2212220932592">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2212220932640">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2212220932688">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask_restful\__init__.py"</cite>,
      line <em class="line">467</em>,
      in <code class="function">wrapper</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:param resource: The resource as a flask view function</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>@wraps(resource)</pre>
<pre class="line before"><span class="ws">        </span>def wrapper(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">            </span>resp = resource(*args, **kwargs)</pre>
<pre class="line after"><span class="ws">            </span>if isinstance(resp, ResponseBase):  # There may be a better way to test</pre>
<pre class="line after"><span class="ws">                </span>return resp</pre>
<pre class="line after"><span class="ws">            </span>data, code, headers = unpack(resp)</pre>
<pre class="line after"><span class="ws">            </span>return self.make_response(data, code, headers=headers)</pre>
<pre class="line after"><span class="ws">        </span>return wrapper</pre></div>
</div>

<li><div class="frame" id="frame-2212220932736">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask\views.py"</cite>,
      line <em class="line">84</em>,
      in <code class="function">view</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>constructor of the class.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>def view(*args: t.Any, **kwargs: t.Any) -&gt; ResponseReturnValue:</pre>
<pre class="line before"><span class="ws">            </span>self = view.view_class(*class_args, **class_kwargs)  # type: ignore</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(self.dispatch_request)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if cls.decorators:</pre>
<pre class="line after"><span class="ws">            </span>view.__name__ = name</pre>
<pre class="line after"><span class="ws">            </span>view.__module__ = cls.__module__</pre>
<pre class="line after"><span class="ws">            </span>for decorator in cls.decorators:</pre></div>
</div>

<li><div class="frame" id="frame-2212220932784">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\flask_restful\__init__.py"</cite>,
      line <em class="line">582</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>decorators = self.method_decorators</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>for decorator in decorators:</pre>
<pre class="line before"><span class="ws">            </span>meth = decorator(meth)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>resp = meth(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if isinstance(resp, ResponseBase):  # There may be a better way to test</pre>
<pre class="line after"><span class="ws">            </span>return resp</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>representations = self.representations or OrderedDict()</pre></div>
</div>

<li><div class="frame" id="frame-2212220932832">
  <h4>File <cite class="filename">"D:\feisu\20211102\api.py"</cite>,
      line <em class="line">47</em>,
      in <code class="function">post</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>case_data = request.json</pre>
<pre class="line before"><span class="ws">        </span>logger.info(f&quot;接收到的参数 &lt;==== {case_data}&quot;)</pre>
<pre class="line before"><span class="ws">        </span># 获取调用该接口传入的json数据中的id</pre>
<pre class="line before"><span class="ws">        </span>case_id = case_data.get(&quot;id&quot;)</pre>
<pre class="line before"><span class="ws">        </span># 使用数据体中的id进行查询，查询到了则使用下述的else逻辑</pre>
<pre class="line current"><span class="ws">        </span>exist = TestCase.query.filter_by(id=case_id).first()</pre>
<pre class="line after"><span class="ws">        </span>logger.info(f&quot;{exist}&quot;)</pre>
<pre class="line after"><span class="ws">        </span># 不存在的时候进行数据的新增操作</pre>
<pre class="line after"><span class="ws">        </span>if not exist:</pre>
<pre class="line after"><span class="ws">            </span>testcase = TestCase(**case_data)</pre>
<pre class="line after"><span class="ws">            </span># 处理不符合字符串的格式的内容 转换成json字符串</pre></div>
</div>

<li><div class="frame" id="frame-2212220932880">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2762</em>,
      in <code class="function">first</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2212220932928">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2846</em>,
      in <code class="function">_iter</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def _iter(self):</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&quot;_sa_orm_load_options&quot;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2212220932976">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1689</em>,
      in <code class="function">execute</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>execution_options = execution_options.union(</pre>
<pre class="line before"><span class="ws">                </span>dict(future_result=False)</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>conn = self._connection_for_bind(bind)</pre>
<pre class="line current"><span class="ws">        </span>result = conn._execute_20(statement, params or {}, execution_options)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line after"><span class="ws">            </span>result = compile_state_cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2212220933024">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1611</em>,
      in <code class="function">_execute_20</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>util.raise_(</pre>
<pre class="line before"><span class="ws">                </span>exc.ObjectNotExecutableError(statement), replace_context=err</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(self, args_10style, kwargs_10style, execution_options)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def exec_driver_sql(</pre>
<pre class="line after"><span class="ws">        </span>self, statement, parameters=None, execution_options=None</pre>
<pre class="line after"><span class="ws">    </span>):</pre>
<pre class="line after"><span class="ws">        </span>r&quot;&quot;&quot;Executes a SQL statement construct and returns a</pre></div>
</div>

<li><div class="frame" id="frame-2212220933072">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">325</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _execute_on_connection(</pre>
<pre class="line before"><span class="ws">        </span>self, connection, multiparams, params, execution_options, _force=False</pre>
<pre class="line before"><span class="ws">    </span>):</pre>
<pre class="line before"><span class="ws">        </span>if _force or self.supports_execution:</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, multiparams, params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2212220933120">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1478</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2212220933168">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1842</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span># CursorResult already exhausted rows / has no rows.</pre>
<pre class="line before"><span class="ws">                    </span># close us now</pre>
<pre class="line before"><span class="ws">                    </span>branched.close()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, statement, parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2212220933216">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2023</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>self._autorollback()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>util.raise_(newraise, with_traceback=exc_info[2], from_=e)</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line current"><span class="ws">                </span>util.raise_(</pre>
<pre class="line after"><span class="ws">                    </span>sqlalchemy_exception, with_traceback=exc_info[2], from_=e</pre>
<pre class="line after"><span class="ws">                </span>)</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>util.raise_(exc_info[1], with_traceback=exc_info[2])</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2212220933264">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\util\compat.py"</cite>,
      line <em class="line">207</em>,
      in <code class="function">raise_</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span># intermediary exception does not change, but we can&#x27;t figure</pre>
<pre class="line before"><span class="ws">            </span># that out.</pre>
<pre class="line before"><span class="ws">            </span>exception.__cause__ = replace_context</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>raise exception</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span># credit to</pre>
<pre class="line after"><span class="ws">            </span># https://cosmicpercolator.com/2016/01/13/exception-leaks-in-python-2-and-3/</pre>
<pre class="line after"><span class="ws">            </span># as the __traceback__ object creates a cycle</pre>
<pre class="line after"><span class="ws">            </span>del exception, replace_context, from_, with_traceback</pre></div>
</div>

<li><div class="frame" id="frame-2212220933312">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1799</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>for fn in self.dialect.dispatch.do_execute:</pre>
<pre class="line before"><span class="ws">                        </span>if fn(cursor, statement, parameters, context):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, statement, parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2212220933360">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">717</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2212220933408">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-2212220933456">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-2212220933504">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\connections.py"</cite>,
      line <em class="line">548</em>,
      in <code class="function">query</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line before"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line current"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre></div>
</div>

<li><div class="frame" id="frame-2212220933552">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\connections.py"</cite>,
      line <em class="line">775</em>,
      in <code class="function">_read_query_result</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                </span>result.unbuffered_active = False</pre>
<pre class="line before"><span class="ws">                </span>result.connection = None</pre>
<pre class="line before"><span class="ws">                </span>raise</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>result = MySQLResult(self)</pre>
<pre class="line current"><span class="ws">            </span>result.read()</pre>
<pre class="line after"><span class="ws">        </span>self._result = result</pre>
<pre class="line after"><span class="ws">        </span>if result.server_status is not None:</pre>
<pre class="line after"><span class="ws">            </span>self.server_status = result.server_status</pre>
<pre class="line after"><span class="ws">        </span>return result.affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2212220933600">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\connections.py"</cite>,
      line <em class="line">1156</em>,
      in <code class="function">read</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>if self.unbuffered_active:</pre>
<pre class="line before"><span class="ws">            </span>self._finish_unbuffered_query()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def read(self):</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>first_packet = self.connection._read_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if first_packet.is_ok_packet():</pre>
<pre class="line after"><span class="ws">                </span>self._read_ok_packet(first_packet)</pre>
<pre class="line after"><span class="ws">            </span>elif first_packet.is_load_local_packet():</pre>
<pre class="line after"><span class="ws">                </span>self._read_load_local_packet(first_packet)</pre></div>
</div>

<li><div class="frame" id="frame-2212220933648">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\connections.py"</cite>,
      line <em class="line">725</em>,
      in <code class="function">_read_packet</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>packet = packet_type(bytes(buff), self.encoding)</pre>
<pre class="line before"><span class="ws">        </span>if packet.is_error_packet():</pre>
<pre class="line before"><span class="ws">            </span>if self._result is not None and self._result.unbuffered_active is True:</pre>
<pre class="line before"><span class="ws">                </span>self._result.unbuffered_active = False</pre>
<pre class="line current"><span class="ws">            </span>packet.raise_for_error()</pre>
<pre class="line after"><span class="ws">        </span>return packet</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _read_bytes(self, num_bytes):</pre>
<pre class="line after"><span class="ws">        </span>self._sock.settimeout(self._read_timeout)</pre>
<pre class="line after"><span class="ws">        </span>while True:</pre></div>
</div>

<li><div class="frame" id="frame-2212220933696">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\protocol.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">raise_for_error</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>self.rewind()</pre>
<pre class="line before"><span class="ws">        </span>self.advance(1)  # field_count == error (we already know that)</pre>
<pre class="line before"><span class="ws">        </span>errno = self.read_uint16()</pre>
<pre class="line before"><span class="ws">        </span>if DEBUG:</pre>
<pre class="line before"><span class="ws">            </span>print(&quot;errno =&quot;, errno)</pre>
<pre class="line current"><span class="ws">        </span>err.raise_mysql_exception(self._data)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def dump(self):</pre>
<pre class="line after"><span class="ws">        </span>dump_packet(self._data)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2212220933744">
  <h4>File <cite class="filename">"D:\feisu\Lib\site-packages\pymysql\err.py"</cite>,
      line <em class="line">143</em>,
      in <code class="function">raise_mysql_exception</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>errno = struct.unpack(&quot;&lt;h&quot;, data[1:3])[0]</pre>
<pre class="line before"><span class="ws">    </span>errval = data[9:].decode(&quot;utf-8&quot;, &quot;replace&quot;)</pre>
<pre class="line before"><span class="ws">    </span>errorclass = error_map.get(errno)</pre>
<pre class="line before"><span class="ws">    </span>if errorclass is None:</pre>
<pre class="line before"><span class="ws">        </span>errorclass = InternalError if errno &lt; 1000 else OperationalError</pre>
<pre class="line current"><span class="ws">    </span>raise errorclass(errno, errval)</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (pymysql.err.OperationalError) (1054, &quot;Unknown column &#x27;test_case.node_id&#x27; in &#x27;field list&#x27;&quot;)
[SQL: SELECT test_case.id AS test_case_id, test_case.node_id AS test_case_node_id, test_case.remark AS test_case_remark 
FROM test_case 
WHERE test_case.id = %(id_1)s 
 LIMIT %(param_1)s]
[parameters: {&#x27;id_1&#x27;: 4, &#x27;param_1&#x27;: 1}]
(Background on this error at: https://sqlalche.me/e/14/e3q8)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py&quot;, line 1799, in _execute_context
    self.dialect.do_execute(
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\engine\default.py&quot;, line 717, in do_execute
    cursor.execute(statement, parameters)
  File &quot;D:\feisu\Lib\site-packages\pymysql\cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;D:\feisu\Lib\site-packages\pymysql\cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;D:\feisu\Lib\site-packages\pymysql\connections.py&quot;, line 548, in query
    self._affected_rows = self._read_query_result(unbuffered=unbuffered)
  File &quot;D:\feisu\Lib\site-packages\pymysql\connections.py&quot;, line 775, in _read_query_result
    result.read()
  File &quot;D:\feisu\Lib\site-packages\pymysql\connections.py&quot;, line 1156, in read
    first_packet = self.connection._read_packet()
  File &quot;D:\feisu\Lib\site-packages\pymysql\connections.py&quot;, line 725, in _read_packet
    packet.raise_for_error()
  File &quot;D:\feisu\Lib\site-packages\pymysql\protocol.py&quot;, line 221, in raise_for_error
    err.raise_mysql_exception(self._data)
  File &quot;D:\feisu\Lib\site-packages\pymysql\err.py&quot;, line 143, in raise_mysql_exception
    raise errorclass(errno, errval)
pymysql.err.OperationalError: (1054, &quot;Unknown column &#x27;test_case.node_id&#x27; in &#x27;field list&#x27;&quot;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &quot;D:\feisu\Lib\site-packages\flask\app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;D:\feisu\Lib\site-packages\flask\app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;D:\feisu\Lib\site-packages\flask_cors\extension.py&quot;, line 165, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File &quot;D:\feisu\Lib\site-packages\flask_restful\__init__.py&quot;, line 271, in error_router
    return original_handler(e)
  File &quot;D:\feisu\Lib\site-packages\flask\app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;D:\feisu\Lib\site-packages\flask\app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;D:\feisu\Lib\site-packages\flask_cors\extension.py&quot;, line 165, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File &quot;D:\feisu\Lib\site-packages\flask_restful\__init__.py&quot;, line 271, in error_router
    return original_handler(e)
  File &quot;D:\feisu\Lib\site-packages\flask\app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;D:\feisu\Lib\site-packages\flask\app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;D:\feisu\Lib\site-packages\flask_restful\__init__.py&quot;, line 467, in wrapper
    resp = resource(*args, **kwargs)
  File &quot;D:\feisu\Lib\site-packages\flask\views.py&quot;, line 84, in view
    return current_app.ensure_sync(self.dispatch_request)(*args, **kwargs)
  File &quot;D:\feisu\Lib\site-packages\flask_restful\__init__.py&quot;, line 582, in dispatch_request
    resp = meth(*args, **kwargs)
  File &quot;D:\feisu\20211102\api.py&quot;, line 47, in post
    exist = TestCase.query.filter_by(id=case_id).first()
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\orm\query.py&quot;, line 2762, in first
    return self.limit(1)._iter().first()
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\orm\query.py&quot;, line 2846, in _iter
    result = self.session.execute(
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\orm\session.py&quot;, line 1689, in execute
    result = conn._execute_20(statement, params or {}, execution_options)
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py&quot;, line 1611, in _execute_20
    return meth(self, args_10style, kwargs_10style, execution_options)
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\sql\elements.py&quot;, line 325, in _execute_on_connection
    return connection._execute_clauseelement(
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py&quot;, line 1478, in _execute_clauseelement
    ret = self._execute_context(
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py&quot;, line 1842, in _execute_context
    self._handle_dbapi_exception(
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py&quot;, line 2023, in _handle_dbapi_exception
    util.raise_(
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\util\compat.py&quot;, line 207, in raise_
    raise exception
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py&quot;, line 1799, in _execute_context
    self.dialect.do_execute(
  File &quot;D:\feisu\Lib\site-packages\sqlalchemy\engine\default.py&quot;, line 717, in do_execute
    cursor.execute(statement, parameters)
  File &quot;D:\feisu\Lib\site-packages\pymysql\cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;D:\feisu\Lib\site-packages\pymysql\cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;D:\feisu\Lib\site-packages\pymysql\connections.py&quot;, line 548, in query
    self._affected_rows = self._read_query_result(unbuffered=unbuffered)
  File &quot;D:\feisu\Lib\site-packages\pymysql\connections.py&quot;, line 775, in _read_query_result
    result.read()
  File &quot;D:\feisu\Lib\site-packages\pymysql\connections.py&quot;, line 1156, in read
    first_packet = self.connection._read_packet()
  File &quot;D:\feisu\Lib\site-packages\pymysql\connections.py&quot;, line 725, in _read_packet
    packet.raise_for_error()
  File &quot;D:\feisu\Lib\site-packages\pymysql\protocol.py&quot;, line 221, in raise_for_error
    err.raise_mysql_exception(self._data)
  File &quot;D:\feisu\Lib\site-packages\pymysql\err.py&quot;, line 143, in raise_mysql_exception
    raise errorclass(errno, errval)
sqlalchemy.exc.OperationalError: (pymysql.err.OperationalError) (1054, &quot;Unknown column &#x27;test_case.node_id&#x27; in &#x27;field list&#x27;&quot;)
[SQL: SELECT test_case.id AS test_case_id, test_case.node_id AS test_case_node_id, test_case.remark AS test_case_remark 
FROM test_case 
WHERE test_case.id = %(id_1)s 
 LIMIT %(param_1)s]
[parameters: {&#x27;id_1&#x27;: 4, &#x27;param_1&#x27;: 1}]
(Background on this error at: https://sqlalche.me/e/14/e3q8)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py", line 1799, in _execute_context
    self.dialect.do_execute(
  File "D:\feisu\Lib\site-packages\sqlalchemy\engine\default.py", line 717, in do_execute
    cursor.execute(statement, parameters)
  File "D:\feisu\Lib\site-packages\pymysql\cursors.py", line 148, in execute
    result = self._query(query)
  File "D:\feisu\Lib\site-packages\pymysql\cursors.py", line 310, in _query
    conn.query(q)
  File "D:\feisu\Lib\site-packages\pymysql\connections.py", line 548, in query
    self._affected_rows = self._read_query_result(unbuffered=unbuffered)
  File "D:\feisu\Lib\site-packages\pymysql\connections.py", line 775, in _read_query_result
    result.read()
  File "D:\feisu\Lib\site-packages\pymysql\connections.py", line 1156, in read
    first_packet = self.connection._read_packet()
  File "D:\feisu\Lib\site-packages\pymysql\connections.py", line 725, in _read_packet
    packet.raise_for_error()
  File "D:\feisu\Lib\site-packages\pymysql\protocol.py", line 221, in raise_for_error
    err.raise_mysql_exception(self._data)
  File "D:\feisu\Lib\site-packages\pymysql\err.py", line 143, in raise_mysql_exception
    raise errorclass(errno, errval)
pymysql.err.OperationalError: (1054, "Unknown column 'test_case.node_id' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\feisu\Lib\site-packages\flask\app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "D:\feisu\Lib\site-packages\flask\app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "D:\feisu\Lib\site-packages\flask_cors\extension.py", line 165, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File "D:\feisu\Lib\site-packages\flask_restful\__init__.py", line 271, in error_router
    return original_handler(e)
  File "D:\feisu\Lib\site-packages\flask\app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "D:\feisu\Lib\site-packages\flask\app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "D:\feisu\Lib\site-packages\flask_cors\extension.py", line 165, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File "D:\feisu\Lib\site-packages\flask_restful\__init__.py", line 271, in error_router
    return original_handler(e)
  File "D:\feisu\Lib\site-packages\flask\app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "D:\feisu\Lib\site-packages\flask\app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "D:\feisu\Lib\site-packages\flask_restful\__init__.py", line 467, in wrapper
    resp = resource(*args, **kwargs)
  File "D:\feisu\Lib\site-packages\flask\views.py", line 84, in view
    return current_app.ensure_sync(self.dispatch_request)(*args, **kwargs)
  File "D:\feisu\Lib\site-packages\flask_restful\__init__.py", line 582, in dispatch_request
    resp = meth(*args, **kwargs)
  File "D:\feisu\20211102\api.py", line 47, in post
    exist = TestCase.query.filter_by(id=case_id).first()
  File "D:\feisu\Lib\site-packages\sqlalchemy\orm\query.py", line 2762, in first
    return self.limit(1)._iter().first()
  File "D:\feisu\Lib\site-packages\sqlalchemy\orm\query.py", line 2846, in _iter
    result = self.session.execute(
  File "D:\feisu\Lib\site-packages\sqlalchemy\orm\session.py", line 1689, in execute
    result = conn._execute_20(statement, params or {}, execution_options)
  File "D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py", line 1611, in _execute_20
    return meth(self, args_10style, kwargs_10style, execution_options)
  File "D:\feisu\Lib\site-packages\sqlalchemy\sql\elements.py", line 325, in _execute_on_connection
    return connection._execute_clauseelement(
  File "D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py", line 1478, in _execute_clauseelement
    ret = self._execute_context(
  File "D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py", line 1842, in _execute_context
    self._handle_dbapi_exception(
  File "D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py", line 2023, in _handle_dbapi_exception
    util.raise_(
  File "D:\feisu\Lib\site-packages\sqlalchemy\util\compat.py", line 207, in raise_
    raise exception
  File "D:\feisu\Lib\site-packages\sqlalchemy\engine\base.py", line 1799, in _execute_context
    self.dialect.do_execute(
  File "D:\feisu\Lib\site-packages\sqlalchemy\engine\default.py", line 717, in do_execute
    cursor.execute(statement, parameters)
  File "D:\feisu\Lib\site-packages\pymysql\cursors.py", line 148, in execute
    result = self._query(query)
  File "D:\feisu\Lib\site-packages\pymysql\cursors.py", line 310, in _query
    conn.query(q)
  File "D:\feisu\Lib\site-packages\pymysql\connections.py", line 548, in query
    self._affected_rows = self._read_query_result(unbuffered=unbuffered)
  File "D:\feisu\Lib\site-packages\pymysql\connections.py", line 775, in _read_query_result
    result.read()
  File "D:\feisu\Lib\site-packages\pymysql\connections.py", line 1156, in read
    first_packet = self.connection._read_packet()
  File "D:\feisu\Lib\site-packages\pymysql\connections.py", line 725, in _read_packet
    packet.raise_for_error()
  File "D:\feisu\Lib\site-packages\pymysql\protocol.py", line 221, in raise_for_error
    err.raise_mysql_exception(self._data)
  File "D:\feisu\Lib\site-packages\pymysql\err.py", line 143, in raise_mysql_exception
    raise errorclass(errno, errval)
sqlalchemy.exc.OperationalError: (pymysql.err.OperationalError) (1054, "Unknown column 'test_case.node_id' in 'field list'")
[SQL: SELECT test_case.id AS test_case_id, test_case.node_id AS test_case_node_id, test_case.remark AS test_case_remark 
FROM test_case 
WHERE test_case.id = %(id_1)s 
 LIMIT %(param_1)s]
[parameters: {'id_1': 4, 'param_1': 1}]
(Background on this error at: https://sqlalche.me/e/14/e3q8)

-->
 
[2021-11-10 18:22:48] [INFO] [api.py]/[line: 20]/[get] 接收到的参数id <==== 4 
[2021-11-11 09:38:48] [INFO] [api.py]/[line: 43]/[post] 接收到的参数 <==== {'id': 1, 'username': '周栒', 'email': 'zhouxun@bonree.com', 'info': '个人信息'} 
